// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0

package database

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/adhupraba/breadit-server/internal/types"
)

type VoteType string

const (
	VoteTypeUP   VoteType = "UP"
	VoteTypeDOWN VoteType = "DOWN"
)

func (e *VoteType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = VoteType(s)
	case string:
		*e = VoteType(s)
	default:
		return fmt.Errorf("unsupported scan type for VoteType: %T", src)
	}
	return nil
}

type NullVoteType struct {
	VoteType VoteType `json:"voteType"`
	Valid    bool     `json:"valid"` // Valid is true if VoteType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullVoteType) Scan(value interface{}) error {
	if value == nil {
		ns.VoteType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.VoteType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullVoteType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.VoteType), nil
}

type Comment struct {
	ID        int32           `db:"id" json:"id"`
	Text      string          `db:"text" json:"text"`
	PostID    int32           `db:"post_id" json:"postId"`
	AuthorID  int32           `db:"author_id" json:"authorId"`
	ReplyToID types.NullInt32 `db:"reply_to_id" json:"replyToId"`
	CreatedAt time.Time       `db:"created_at" json:"createdAt"`
	UpdatedAt time.Time       `db:"updated_at" json:"updatedAt"`
}

type CommentVote struct {
	ID        int32     `db:"id" json:"id"`
	CommentID int32     `db:"comment_id" json:"commentId"`
	UserID    int32     `db:"user_id" json:"userId"`
	Type      VoteType  `db:"type" json:"type"`
	CreatedAt time.Time `db:"created_at" json:"createdAt"`
	UpdatedAt time.Time `db:"updated_at" json:"updatedAt"`
}

type Post struct {
	ID          int32                `db:"id" json:"id"`
	Title       string               `db:"title" json:"title"`
	Content     types.NullRawMessage `db:"content" json:"content"`
	SubredditID int32                `db:"subreddit_id" json:"subredditId"`
	AuthorID    int32                `db:"author_id" json:"authorId"`
	CreatedAt   time.Time            `db:"created_at" json:"createdAt"`
	UpdatedAt   time.Time            `db:"updated_at" json:"updatedAt"`
}

type Subreddit struct {
	ID        int32           `db:"id" json:"id"`
	Name      string          `db:"name" json:"name"`
	CreatorID types.NullInt32 `db:"creator_id" json:"creatorId"`
	CreatedAt time.Time       `db:"created_at" json:"createdAt"`
	UpdatedAt time.Time       `db:"updated_at" json:"updatedAt"`
}

type Subscription struct {
	ID          int32     `db:"id" json:"id"`
	UserID      int32     `db:"user_id" json:"userId"`
	SubredditID int32     `db:"subreddit_id" json:"subredditId"`
	CreatedAt   time.Time `db:"created_at" json:"createdAt"`
	UpdatedAt   time.Time `db:"updated_at" json:"updatedAt"`
}

type User struct {
	ID        int32            `db:"id" json:"id"`
	Name      string           `db:"name" json:"name"`
	Email     string           `db:"email" json:"email"`
	Username  string           `db:"username" json:"username"`
	Password  string           `db:"password" json:"-"`
	Image     types.NullString `db:"image" json:"image"`
	CreatedAt time.Time        `db:"created_at" json:"createdAt"`
	UpdatedAt time.Time        `db:"updated_at" json:"updatedAt"`
}

type Vote struct {
	ID        int32     `db:"id" json:"id"`
	PostID    int32     `db:"post_id" json:"postId"`
	UserID    int32     `db:"user_id" json:"userId"`
	Type      VoteType  `db:"type" json:"type"`
	CreatedAt time.Time `db:"created_at" json:"createdAt"`
	UpdatedAt time.Time `db:"updated_at" json:"updatedAt"`
}
