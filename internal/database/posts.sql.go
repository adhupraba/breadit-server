// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: posts.sql

package database

import (
	"context"
	"encoding/json"
	"time"

	"github.com/adhupraba/breadit-server/internal/types"
)

const findPostsOfASubreddit = `-- name: FindPostsOfASubreddit :many
SELECT
  posts.id, posts.title, posts.content, posts.subreddit_id, posts.author_id, posts.created_at, posts.updated_at,
  users.id, users.name, users.email, users.username, users.password, users.image, users.created_at, users.updated_at,
  JSON_AGG(votes.*) AS votes,
  JSON_AGG(comments.*) AS comments
FROM posts
  INNER JOIN users ON users.id = posts.author_id
  LEFT JOIN votes ON votes.post_id = posts.id
  LEFT JOIN comments ON comments.post_id = posts.id
WHERE posts.subreddit_id = $1
GROUP BY posts.id, users.id
OFFSET $2 LIMIT $3
`

type FindPostsOfASubredditParams struct {
	SubredditID int32 `json:"subredditId"`
	Offset      int32 `json:"offset"`
	Limit       int32 `json:"limit"`
}

type FindPostsOfASubredditRow struct {
	ID          int32                `json:"id"`
	Title       string               `json:"title"`
	Content     types.NullRawMessage `json:"content"`
	SubredditID int32                `json:"subredditId"`
	AuthorID    int32                `json:"authorId"`
	CreatedAt   time.Time            `json:"createdAt"`
	UpdatedAt   time.Time            `json:"updatedAt"`
	User        User                 `json:"user"`
	Votes       json.RawMessage      `json:"votes"`
	Comments    json.RawMessage      `json:"comments"`
}

func (q *Queries) FindPostsOfASubreddit(ctx context.Context, arg FindPostsOfASubredditParams) ([]FindPostsOfASubredditRow, error) {
	rows, err := q.db.QueryContext(ctx, findPostsOfASubreddit, arg.SubredditID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindPostsOfASubredditRow
	for rows.Next() {
		var i FindPostsOfASubredditRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.SubredditID,
			&i.AuthorID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.User.ID,
			&i.User.Name,
			&i.User.Email,
			&i.User.Username,
			&i.User.Password,
			&i.User.Image,
			&i.User.CreatedAt,
			&i.User.UpdatedAt,
			&i.Votes,
			&i.Comments,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
