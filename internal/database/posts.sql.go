// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: posts.sql

package database

import (
	"context"
	"encoding/json"
	"time"

	"github.com/sqlc-dev/pqtype"
)

const findPostsOfASubreddit = `-- name: FindPostsOfASubreddit :many
SELECT id, title, content, subreddit_id, author_id, created_at, updated_at FROM posts WHERE subreddit_id = $1 OFFSET $2 LIMIT $3
`

type FindPostsOfASubredditParams struct {
	SubredditID int32
	Offset      int32
	Limit       int32
}

func (q *Queries) FindPostsOfASubreddit(ctx context.Context, arg FindPostsOfASubredditParams) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, findPostsOfASubreddit, arg.SubredditID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.SubredditID,
			&i.AuthorID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const postsData = `-- name: PostsData :many
SELECT
  posts.id, posts.title, posts.content, posts.subreddit_id, posts.author_id, posts.created_at, posts.updated_at,
  users.id, users.name, users.email, users.username, users.password, users.image, users.created_at, users.updated_at,
  json_agg(votes.*) AS votes,
  json_agg(comments.*) AS comments
FROM posts
  INNER JOIN users ON users.id = posts.author_id
  LEFT JOIN votes ON votes.post_id = posts.id
  LEFT JOIN comments ON comments.post_id = posts.id
WHERE posts.subreddit_id = $1
GROUP BY posts.id, users.id
`

type PostsDataRow struct {
	ID          int32
	Title       string
	Content     pqtype.NullRawMessage
	SubredditID int32
	AuthorID    int32
	CreatedAt   time.Time
	UpdatedAt   time.Time
	User        User
	Votes       json.RawMessage
	Comments    json.RawMessage
}

func (q *Queries) PostsData(ctx context.Context, subredditID int32) ([]PostsDataRow, error) {
	rows, err := q.db.QueryContext(ctx, postsData, subredditID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PostsDataRow
	for rows.Next() {
		var i PostsDataRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.SubredditID,
			&i.AuthorID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.User.ID,
			&i.User.Name,
			&i.User.Email,
			&i.User.Username,
			&i.User.Password,
			&i.User.Image,
			&i.User.CreatedAt,
			&i.User.UpdatedAt,
			&i.Votes,
			&i.Comments,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
