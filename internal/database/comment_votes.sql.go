// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: comment_votes.sql

package database

import (
	"context"
)

const createCommentVote = `-- name: CreateCommentVote :one
INSERT INTO comment_votes (comment_id, user_id, type)
VALUES ($1, $2, $3)
RETURNING id, comment_id, user_id, type, created_at, updated_at
`

type CreateCommentVoteParams struct {
	CommentID int32    `db:"comment_id" json:"commentId"`
	UserID    int32    `db:"user_id" json:"userId"`
	Type      VoteType `db:"type" json:"type"`
}

func (q *Queries) CreateCommentVote(ctx context.Context, arg CreateCommentVoteParams) (CommentVote, error) {
	row := q.db.QueryRowContext(ctx, createCommentVote, arg.CommentID, arg.UserID, arg.Type)
	var i CommentVote
	err := row.Scan(
		&i.ID,
		&i.CommentID,
		&i.UserID,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findUserVoteOfAComment = `-- name: FindUserVoteOfAComment :one
SELECT id, comment_id, user_id, type, created_at, updated_at FROM comment_votes WHERE comment_votes.user_id = $1 AND comment_votes.comment_id = $2
`

type FindUserVoteOfACommentParams struct {
	UserID    int32 `db:"user_id" json:"userId"`
	CommentID int32 `db:"comment_id" json:"commentId"`
}

func (q *Queries) FindUserVoteOfAComment(ctx context.Context, arg FindUserVoteOfACommentParams) (CommentVote, error) {
	row := q.db.QueryRowContext(ctx, findUserVoteOfAComment, arg.UserID, arg.CommentID)
	var i CommentVote
	err := row.Scan(
		&i.ID,
		&i.CommentID,
		&i.UserID,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const removeCommentVote = `-- name: RemoveCommentVote :exec
DELETE FROM comment_votes WHERE id = $1
`

func (q *Queries) RemoveCommentVote(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, removeCommentVote, id)
	return err
}

const updateCommentVote = `-- name: UpdateCommentVote :exec
UPDATE comment_votes SET type = $1 WHERE id = $2
`

type UpdateCommentVoteParams struct {
	Type VoteType `db:"type" json:"type"`
	ID   int32    `db:"id" json:"id"`
}

func (q *Queries) UpdateCommentVote(ctx context.Context, arg UpdateCommentVoteParams) error {
	_, err := q.db.ExecContext(ctx, updateCommentVote, arg.Type, arg.ID)
	return err
}
