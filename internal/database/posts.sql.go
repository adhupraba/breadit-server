// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: posts.sql

package database

import (
	"context"
)

const findPostsOfSubredditWithAuthor = `-- name: FindPostsOfSubredditWithAuthor :many
SELECT
  posts.id, posts.title, posts.content, posts.subreddit_id, posts.author_id, posts.created_at, posts.updated_at,
  users.id, users.name, users.email, users.username, users.password, users.image, users.created_at, users.updated_at
FROM posts
  INNER JOIN users ON users.id = posts.author_id
WHERE posts.subreddit_id = $1
GROUP BY posts.id, users.id
OFFSET $2 LIMIT $3
`

type FindPostsOfSubredditWithAuthorParams struct {
	SubredditID int32 `json:"subredditId"`
	Offset      int32 `json:"offset"`
	Limit       int32 `json:"limit"`
}

type FindPostsOfSubredditWithAuthorRow struct {
	Post Post `json:"post"`
	User User `json:"user"`
}

func (q *Queries) FindPostsOfSubredditWithAuthor(ctx context.Context, arg FindPostsOfSubredditWithAuthorParams) ([]FindPostsOfSubredditWithAuthorRow, error) {
	rows, err := q.db.QueryContext(ctx, findPostsOfSubredditWithAuthor, arg.SubredditID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindPostsOfSubredditWithAuthorRow
	for rows.Next() {
		var i FindPostsOfSubredditWithAuthorRow
		if err := rows.Scan(
			&i.Post.ID,
			&i.Post.Title,
			&i.Post.Content,
			&i.Post.SubredditID,
			&i.Post.AuthorID,
			&i.Post.CreatedAt,
			&i.Post.UpdatedAt,
			&i.User.ID,
			&i.User.Name,
			&i.User.Email,
			&i.User.Username,
			&i.User.Password,
			&i.User.Image,
			&i.User.CreatedAt,
			&i.User.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
