// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: votes.sql

package database

import (
	"context"

	"github.com/lib/pq"
)

const findVotesOfAPost = `-- name: FindVotesOfAPost :many
SELECT id, post_id, user_id, type, created_at, updated_at FROM votes WHERE post_id = $1
`

func (q *Queries) FindVotesOfAPost(ctx context.Context, postID int32) ([]Vote, error) {
	rows, err := q.db.QueryContext(ctx, findVotesOfAPost, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Vote
	for rows.Next() {
		var i Vote
		if err := rows.Scan(
			&i.ID,
			&i.PostID,
			&i.UserID,
			&i.Type,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findVotesOfPosts = `-- name: FindVotesOfPosts :many
SELECT id, post_id, user_id, type, created_at, updated_at FROM votes WHERE post_id = ANY($1::INT[])
`

func (q *Queries) FindVotesOfPosts(ctx context.Context, dollar_1 []int32) ([]Vote, error) {
	rows, err := q.db.QueryContext(ctx, findVotesOfPosts, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Vote
	for rows.Next() {
		var i Vote
		if err := rows.Scan(
			&i.ID,
			&i.PostID,
			&i.UserID,
			&i.Type,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
